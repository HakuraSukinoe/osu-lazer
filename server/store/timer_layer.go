// Code generated by "make store-layers"
// DO NOT EDIT

package store

import (
	timemodule "time"

	"github.com/deissh/osu-lazer/server/einterfaces"
	"github.com/deissh/osu-lazer/server/model"
)

type TimerLayer struct {
	Store
	Metrics   einterfaces.MetricsInterface
	UserStore UserStore
}

func (s *TimerLayer) User() UserStore {
	return s.UserStore
}

type TimerLayerUserStore struct {
	UserStore
	Root *TimerLayer
}

func (s *TimerLayerUserStore) Get(id string) (*model.User, *error) {
	start := timemodule.Now()

	resultVar0, resultVar1 := s.UserStore.Get(id)

	elapsed := float64(timemodule.Since(start)) / float64(timemodule.Second)
	if s.Root.Metrics != nil {
		success := "false"
		if true {
			success = "true"
		}
		s.Root.Metrics.ObserveStoreMethodDuration("UserStore.Get", success, elapsed)
	}
	return resultVar0, resultVar1
}

func (s *TimerLayerUserStore) GetAll() ([]*model.User, *error) {
	start := timemodule.Now()

	resultVar0, resultVar1 := s.UserStore.GetAll()

	elapsed := float64(timemodule.Since(start)) / float64(timemodule.Second)
	if s.Root.Metrics != nil {
		success := "false"
		if true {
			success = "true"
		}
		s.Root.Metrics.ObserveStoreMethodDuration("UserStore.GetAll", success, elapsed)
	}
	return resultVar0, resultVar1
}

func NewTimerLayer(childStore Store, metrics einterfaces.MetricsInterface) *TimerLayer {
	newStore := TimerLayer{
		Store:   childStore,
		Metrics: metrics,
	}

	newStore.UserStore = &TimerLayerUserStore{UserStore: childStore.User(), Root: &newStore}
	return &newStore
}
